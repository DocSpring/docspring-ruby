=begin
#API v1

#DocSpring is a service that helps you fill out and sign PDF templates.

OpenAPI spec version: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.0

=end

require 'date'

module DocSpring
  class Template1
    attr_accessor :document_processed

    attr_accessor :expiration_interval

    attr_accessor :scss

    attr_accessor :document_state

    attr_accessor :expire_after

    attr_accessor :description

    attr_accessor :slack_webhook_url

    attr_accessor :demo

    attr_accessor :path

    attr_accessor :header_html

    attr_accessor :public_web_form

    attr_accessor :field_order

    attr_accessor :permanent_document_url

    attr_accessor :html

    attr_accessor :template_type

    attr_accessor :id

    attr_accessor :page_dimensions

    attr_accessor :locked

    attr_accessor :page_count

    attr_accessor :encrypt_pdfs

    attr_accessor :webhook_url

    attr_accessor :embed_domains

    attr_accessor :parent_folder_id

    attr_accessor :allow_additional_properties

    attr_accessor :encrypt_pdfs_password

    attr_accessor :public_submissions

    attr_accessor :shared_field_data

    attr_accessor :document_md5

    attr_accessor :first_template

    attr_accessor :defaults

    attr_accessor :editable_submissions

    attr_accessor :expire_submissions

    attr_accessor :name

    attr_accessor :footer_html

    attr_accessor :document_parse_error

    attr_accessor :fields

    attr_accessor :document_filename

    attr_accessor :redirect_url

    attr_accessor :document_url

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'document_processed' => :'document_processed',
        :'expiration_interval' => :'expiration_interval',
        :'scss' => :'scss',
        :'document_state' => :'document_state',
        :'expire_after' => :'expire_after',
        :'description' => :'description',
        :'slack_webhook_url' => :'slack_webhook_url',
        :'demo' => :'demo',
        :'path' => :'path',
        :'header_html' => :'header_html',
        :'public_web_form' => :'public_web_form',
        :'field_order' => :'field_order',
        :'permanent_document_url' => :'permanent_document_url',
        :'html' => :'html',
        :'template_type' => :'template_type',
        :'id' => :'id',
        :'page_dimensions' => :'page_dimensions',
        :'locked' => :'locked',
        :'page_count' => :'page_count',
        :'encrypt_pdfs' => :'encrypt_pdfs',
        :'webhook_url' => :'webhook_url',
        :'embed_domains' => :'embed_domains',
        :'parent_folder_id' => :'parent_folder_id',
        :'allow_additional_properties' => :'allow_additional_properties',
        :'encrypt_pdfs_password' => :'encrypt_pdfs_password',
        :'public_submissions' => :'public_submissions',
        :'shared_field_data' => :'shared_field_data',
        :'document_md5' => :'document_md5',
        :'first_template' => :'first_template',
        :'defaults' => :'defaults',
        :'editable_submissions' => :'editable_submissions',
        :'expire_submissions' => :'expire_submissions',
        :'name' => :'name',
        :'footer_html' => :'footer_html',
        :'document_parse_error' => :'document_parse_error',
        :'fields' => :'fields',
        :'document_filename' => :'document_filename',
        :'redirect_url' => :'redirect_url',
        :'document_url' => :'document_url'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'document_processed' => :'BOOLEAN',
        :'expiration_interval' => :'String',
        :'scss' => :'String',
        :'document_state' => :'String',
        :'expire_after' => :'Float',
        :'description' => :'String',
        :'slack_webhook_url' => :'String',
        :'demo' => :'BOOLEAN',
        :'path' => :'String',
        :'header_html' => :'String',
        :'public_web_form' => :'BOOLEAN',
        :'field_order' => :'Array<Array<Float>>',
        :'permanent_document_url' => :'String',
        :'html' => :'String',
        :'template_type' => :'String',
        :'id' => :'String',
        :'page_dimensions' => :'Array<Array<Float>>',
        :'locked' => :'BOOLEAN',
        :'page_count' => :'Float',
        :'encrypt_pdfs' => :'BOOLEAN',
        :'webhook_url' => :'String',
        :'embed_domains' => :'Array<String>',
        :'parent_folder_id' => :'String',
        :'allow_additional_properties' => :'BOOLEAN',
        :'encrypt_pdfs_password' => :'String',
        :'public_submissions' => :'BOOLEAN',
        :'shared_field_data' => :'Object',
        :'document_md5' => :'String',
        :'first_template' => :'BOOLEAN',
        :'defaults' => :'Template1Defaults',
        :'editable_submissions' => :'BOOLEAN',
        :'expire_submissions' => :'BOOLEAN',
        :'name' => :'String',
        :'footer_html' => :'String',
        :'document_parse_error' => :'BOOLEAN',
        :'fields' => :'Object',
        :'document_filename' => :'String',
        :'redirect_url' => :'String',
        :'document_url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'document_processed')
        self.document_processed = attributes[:'document_processed']
      end

      if attributes.has_key?(:'expiration_interval')
        self.expiration_interval = attributes[:'expiration_interval']
      end

      if attributes.has_key?(:'scss')
        self.scss = attributes[:'scss']
      end

      if attributes.has_key?(:'document_state')
        self.document_state = attributes[:'document_state']
      end

      if attributes.has_key?(:'expire_after')
        self.expire_after = attributes[:'expire_after']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'slack_webhook_url')
        self.slack_webhook_url = attributes[:'slack_webhook_url']
      end

      if attributes.has_key?(:'demo')
        self.demo = attributes[:'demo']
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'header_html')
        self.header_html = attributes[:'header_html']
      end

      if attributes.has_key?(:'public_web_form')
        self.public_web_form = attributes[:'public_web_form']
      end

      if attributes.has_key?(:'field_order')
        if (value = attributes[:'field_order']).is_a?(Array)
          self.field_order = value
        end
      end

      if attributes.has_key?(:'permanent_document_url')
        self.permanent_document_url = attributes[:'permanent_document_url']
      end

      if attributes.has_key?(:'html')
        self.html = attributes[:'html']
      end

      if attributes.has_key?(:'template_type')
        self.template_type = attributes[:'template_type']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'page_dimensions')
        if (value = attributes[:'page_dimensions']).is_a?(Array)
          self.page_dimensions = value
        end
      end

      if attributes.has_key?(:'locked')
        self.locked = attributes[:'locked']
      end

      if attributes.has_key?(:'page_count')
        self.page_count = attributes[:'page_count']
      end

      if attributes.has_key?(:'encrypt_pdfs')
        self.encrypt_pdfs = attributes[:'encrypt_pdfs']
      end

      if attributes.has_key?(:'webhook_url')
        self.webhook_url = attributes[:'webhook_url']
      end

      if attributes.has_key?(:'embed_domains')
        if (value = attributes[:'embed_domains']).is_a?(Array)
          self.embed_domains = value
        end
      end

      if attributes.has_key?(:'parent_folder_id')
        self.parent_folder_id = attributes[:'parent_folder_id']
      end

      if attributes.has_key?(:'allow_additional_properties')
        self.allow_additional_properties = attributes[:'allow_additional_properties']
      end

      if attributes.has_key?(:'encrypt_pdfs_password')
        self.encrypt_pdfs_password = attributes[:'encrypt_pdfs_password']
      end

      if attributes.has_key?(:'public_submissions')
        self.public_submissions = attributes[:'public_submissions']
      end

      if attributes.has_key?(:'shared_field_data')
        self.shared_field_data = attributes[:'shared_field_data']
      end

      if attributes.has_key?(:'document_md5')
        self.document_md5 = attributes[:'document_md5']
      end

      if attributes.has_key?(:'first_template')
        self.first_template = attributes[:'first_template']
      end

      if attributes.has_key?(:'defaults')
        self.defaults = attributes[:'defaults']
      end

      if attributes.has_key?(:'editable_submissions')
        self.editable_submissions = attributes[:'editable_submissions']
      end

      if attributes.has_key?(:'expire_submissions')
        self.expire_submissions = attributes[:'expire_submissions']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'footer_html')
        self.footer_html = attributes[:'footer_html']
      end

      if attributes.has_key?(:'document_parse_error')
        self.document_parse_error = attributes[:'document_parse_error']
      end

      if attributes.has_key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.has_key?(:'document_filename')
        self.document_filename = attributes[:'document_filename']
      end

      if attributes.has_key?(:'redirect_url')
        self.redirect_url = attributes[:'redirect_url']
      end

      if attributes.has_key?(:'document_url')
        self.document_url = attributes[:'document_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      expiration_interval_validator = EnumAttributeValidator.new('String', ['minutes', 'hours', 'days'])
      return false unless expiration_interval_validator.valid?(@expiration_interval)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expiration_interval Object to be assigned
    def expiration_interval=(expiration_interval)
      validator = EnumAttributeValidator.new('String', ['minutes', 'hours', 'days'])
      unless validator.valid?(expiration_interval)
        fail ArgumentError, 'invalid value for "expiration_interval", must be one of #{validator.allowable_values}.'
      end
      @expiration_interval = expiration_interval
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          document_processed == o.document_processed &&
          expiration_interval == o.expiration_interval &&
          scss == o.scss &&
          document_state == o.document_state &&
          expire_after == o.expire_after &&
          description == o.description &&
          slack_webhook_url == o.slack_webhook_url &&
          demo == o.demo &&
          path == o.path &&
          header_html == o.header_html &&
          public_web_form == o.public_web_form &&
          field_order == o.field_order &&
          permanent_document_url == o.permanent_document_url &&
          html == o.html &&
          template_type == o.template_type &&
          id == o.id &&
          page_dimensions == o.page_dimensions &&
          locked == o.locked &&
          page_count == o.page_count &&
          encrypt_pdfs == o.encrypt_pdfs &&
          webhook_url == o.webhook_url &&
          embed_domains == o.embed_domains &&
          parent_folder_id == o.parent_folder_id &&
          allow_additional_properties == o.allow_additional_properties &&
          encrypt_pdfs_password == o.encrypt_pdfs_password &&
          public_submissions == o.public_submissions &&
          shared_field_data == o.shared_field_data &&
          document_md5 == o.document_md5 &&
          first_template == o.first_template &&
          defaults == o.defaults &&
          editable_submissions == o.editable_submissions &&
          expire_submissions == o.expire_submissions &&
          name == o.name &&
          footer_html == o.footer_html &&
          document_parse_error == o.document_parse_error &&
          fields == o.fields &&
          document_filename == o.document_filename &&
          redirect_url == o.redirect_url &&
          document_url == o.document_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [document_processed, expiration_interval, scss, document_state, expire_after, description, slack_webhook_url, demo, path, header_html, public_web_form, field_order, permanent_document_url, html, template_type, id, page_dimensions, locked, page_count, encrypt_pdfs, webhook_url, embed_domains, parent_folder_id, allow_additional_properties, encrypt_pdfs_password, public_submissions, shared_field_data, document_md5, first_template, defaults, editable_submissions, expire_submissions, name, footer_html, document_parse_error, fields, document_filename, redirect_url, document_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocSpring.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
