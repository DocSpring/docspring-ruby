=begin
#DocSpring API

#DocSpring provides an API that helps you fill out and sign PDF templates.

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module DocSpring
  class TemplatePreview
    attr_accessor :add_data_request_submission_id_footers

    attr_accessor :allow_additional_properties

    attr_accessor :description

    attr_accessor :document_filename

    attr_accessor :document_md5

    attr_accessor :document_parse_error

    attr_accessor :document_processed

    attr_accessor :document_state

    attr_accessor :document_url

    attr_accessor :editable_submissions

    attr_accessor :embed_domains

    attr_accessor :encrypt_pdfs_password

    attr_accessor :encrypt_pdfs

    attr_accessor :expiration_interval

    attr_accessor :expire_after

    attr_accessor :expire_submissions

    attr_accessor :external_predefined_fields_template_id

    attr_accessor :external_predefined_fields_template_name

    attr_accessor :first_template

    attr_accessor :id

    attr_accessor :locked

    attr_accessor :merge_audit_trail_pdf

    attr_accessor :name

    attr_accessor :page_count

    attr_accessor :page_dimensions

    attr_accessor :parent_folder_id

    attr_accessor :path

    attr_accessor :permanent_document_url

    attr_accessor :public_submissions

    attr_accessor :public_web_form

    attr_accessor :redirect_url

    attr_accessor :slack_webhook_url

    attr_accessor :template_type

    attr_accessor :updated_at

    attr_accessor :version_published_at

    attr_accessor :version

    attr_accessor :webhook_url

    attr_accessor :demo

    attr_accessor :latest_version

    attr_accessor :last_changed_at

    attr_accessor :last_changed_by_type

    attr_accessor :last_changed_by_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'add_data_request_submission_id_footers' => :'add_data_request_submission_id_footers',
        :'allow_additional_properties' => :'allow_additional_properties',
        :'description' => :'description',
        :'document_filename' => :'document_filename',
        :'document_md5' => :'document_md5',
        :'document_parse_error' => :'document_parse_error',
        :'document_processed' => :'document_processed',
        :'document_state' => :'document_state',
        :'document_url' => :'document_url',
        :'editable_submissions' => :'editable_submissions',
        :'embed_domains' => :'embed_domains',
        :'encrypt_pdfs_password' => :'encrypt_pdfs_password',
        :'encrypt_pdfs' => :'encrypt_pdfs',
        :'expiration_interval' => :'expiration_interval',
        :'expire_after' => :'expire_after',
        :'expire_submissions' => :'expire_submissions',
        :'external_predefined_fields_template_id' => :'external_predefined_fields_template_id',
        :'external_predefined_fields_template_name' => :'external_predefined_fields_template_name',
        :'first_template' => :'first_template',
        :'id' => :'id',
        :'locked' => :'locked',
        :'merge_audit_trail_pdf' => :'merge_audit_trail_pdf',
        :'name' => :'name',
        :'page_count' => :'page_count',
        :'page_dimensions' => :'page_dimensions',
        :'parent_folder_id' => :'parent_folder_id',
        :'path' => :'path',
        :'permanent_document_url' => :'permanent_document_url',
        :'public_submissions' => :'public_submissions',
        :'public_web_form' => :'public_web_form',
        :'redirect_url' => :'redirect_url',
        :'slack_webhook_url' => :'slack_webhook_url',
        :'template_type' => :'template_type',
        :'updated_at' => :'updated_at',
        :'version_published_at' => :'version_published_at',
        :'version' => :'version',
        :'webhook_url' => :'webhook_url',
        :'demo' => :'demo',
        :'latest_version' => :'latest_version',
        :'last_changed_at' => :'last_changed_at',
        :'last_changed_by_type' => :'last_changed_by_type',
        :'last_changed_by_id' => :'last_changed_by_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'add_data_request_submission_id_footers' => :'Boolean',
        :'allow_additional_properties' => :'Boolean',
        :'description' => :'String',
        :'document_filename' => :'String',
        :'document_md5' => :'String',
        :'document_parse_error' => :'Boolean',
        :'document_processed' => :'Boolean',
        :'document_state' => :'String',
        :'document_url' => :'String',
        :'editable_submissions' => :'Boolean',
        :'embed_domains' => :'String',
        :'encrypt_pdfs_password' => :'String',
        :'encrypt_pdfs' => :'Boolean',
        :'expiration_interval' => :'String',
        :'expire_after' => :'Integer',
        :'expire_submissions' => :'Boolean',
        :'external_predefined_fields_template_id' => :'String',
        :'external_predefined_fields_template_name' => :'String',
        :'first_template' => :'Boolean',
        :'id' => :'String',
        :'locked' => :'Boolean',
        :'merge_audit_trail_pdf' => :'Boolean',
        :'name' => :'String',
        :'page_count' => :'Integer',
        :'page_dimensions' => :'Array<Array<Float>>',
        :'parent_folder_id' => :'String',
        :'path' => :'String',
        :'permanent_document_url' => :'String',
        :'public_submissions' => :'Boolean',
        :'public_web_form' => :'Boolean',
        :'redirect_url' => :'String',
        :'slack_webhook_url' => :'String',
        :'template_type' => :'String',
        :'updated_at' => :'String',
        :'version_published_at' => :'String',
        :'version' => :'String',
        :'webhook_url' => :'String',
        :'demo' => :'Boolean',
        :'latest_version' => :'String',
        :'last_changed_at' => :'String',
        :'last_changed_by_type' => :'String',
        :'last_changed_by_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'document_filename',
        :'document_md5',
        :'document_url',
        :'embed_domains',
        :'encrypt_pdfs_password',
        :'external_predefined_fields_template_id',
        :'external_predefined_fields_template_name',
        :'id',
        :'name',
        :'page_dimensions',
        :'parent_folder_id',
        :'path',
        :'permanent_document_url',
        :'redirect_url',
        :'slack_webhook_url',
        :'updated_at',
        :'version_published_at',
        :'version',
        :'webhook_url',
        :'latest_version',
        :'last_changed_at',
        :'last_changed_by_type',
        :'last_changed_by_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DocSpring::TemplatePreview` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DocSpring::TemplatePreview`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'add_data_request_submission_id_footers')
        self.add_data_request_submission_id_footers = attributes[:'add_data_request_submission_id_footers']
      else
        self.add_data_request_submission_id_footers = nil
      end

      if attributes.key?(:'allow_additional_properties')
        self.allow_additional_properties = attributes[:'allow_additional_properties']
      else
        self.allow_additional_properties = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = nil
      end

      if attributes.key?(:'document_filename')
        self.document_filename = attributes[:'document_filename']
      else
        self.document_filename = nil
      end

      if attributes.key?(:'document_md5')
        self.document_md5 = attributes[:'document_md5']
      else
        self.document_md5 = nil
      end

      if attributes.key?(:'document_parse_error')
        self.document_parse_error = attributes[:'document_parse_error']
      else
        self.document_parse_error = nil
      end

      if attributes.key?(:'document_processed')
        self.document_processed = attributes[:'document_processed']
      else
        self.document_processed = nil
      end

      if attributes.key?(:'document_state')
        self.document_state = attributes[:'document_state']
      else
        self.document_state = nil
      end

      if attributes.key?(:'document_url')
        self.document_url = attributes[:'document_url']
      else
        self.document_url = nil
      end

      if attributes.key?(:'editable_submissions')
        self.editable_submissions = attributes[:'editable_submissions']
      else
        self.editable_submissions = nil
      end

      if attributes.key?(:'embed_domains')
        self.embed_domains = attributes[:'embed_domains']
      else
        self.embed_domains = nil
      end

      if attributes.key?(:'encrypt_pdfs_password')
        self.encrypt_pdfs_password = attributes[:'encrypt_pdfs_password']
      else
        self.encrypt_pdfs_password = nil
      end

      if attributes.key?(:'encrypt_pdfs')
        self.encrypt_pdfs = attributes[:'encrypt_pdfs']
      else
        self.encrypt_pdfs = nil
      end

      if attributes.key?(:'expiration_interval')
        self.expiration_interval = attributes[:'expiration_interval']
      else
        self.expiration_interval = nil
      end

      if attributes.key?(:'expire_after')
        self.expire_after = attributes[:'expire_after']
      else
        self.expire_after = nil
      end

      if attributes.key?(:'expire_submissions')
        self.expire_submissions = attributes[:'expire_submissions']
      else
        self.expire_submissions = nil
      end

      if attributes.key?(:'external_predefined_fields_template_id')
        self.external_predefined_fields_template_id = attributes[:'external_predefined_fields_template_id']
      else
        self.external_predefined_fields_template_id = nil
      end

      if attributes.key?(:'external_predefined_fields_template_name')
        self.external_predefined_fields_template_name = attributes[:'external_predefined_fields_template_name']
      else
        self.external_predefined_fields_template_name = nil
      end

      if attributes.key?(:'first_template')
        self.first_template = attributes[:'first_template']
      else
        self.first_template = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'locked')
        self.locked = attributes[:'locked']
      else
        self.locked = nil
      end

      if attributes.key?(:'merge_audit_trail_pdf')
        self.merge_audit_trail_pdf = attributes[:'merge_audit_trail_pdf']
      else
        self.merge_audit_trail_pdf = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'page_count')
        self.page_count = attributes[:'page_count']
      else
        self.page_count = nil
      end

      if attributes.key?(:'page_dimensions')
        if (value = attributes[:'page_dimensions']).is_a?(Array)
          self.page_dimensions = value
        end
      else
        self.page_dimensions = nil
      end

      if attributes.key?(:'parent_folder_id')
        self.parent_folder_id = attributes[:'parent_folder_id']
      else
        self.parent_folder_id = nil
      end

      if attributes.key?(:'path')
        self.path = attributes[:'path']
      else
        self.path = nil
      end

      if attributes.key?(:'permanent_document_url')
        self.permanent_document_url = attributes[:'permanent_document_url']
      else
        self.permanent_document_url = nil
      end

      if attributes.key?(:'public_submissions')
        self.public_submissions = attributes[:'public_submissions']
      else
        self.public_submissions = nil
      end

      if attributes.key?(:'public_web_form')
        self.public_web_form = attributes[:'public_web_form']
      else
        self.public_web_form = nil
      end

      if attributes.key?(:'redirect_url')
        self.redirect_url = attributes[:'redirect_url']
      else
        self.redirect_url = nil
      end

      if attributes.key?(:'slack_webhook_url')
        self.slack_webhook_url = attributes[:'slack_webhook_url']
      else
        self.slack_webhook_url = nil
      end

      if attributes.key?(:'template_type')
        self.template_type = attributes[:'template_type']
      else
        self.template_type = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'version_published_at')
        self.version_published_at = attributes[:'version_published_at']
      else
        self.version_published_at = nil
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      else
        self.version = nil
      end

      if attributes.key?(:'webhook_url')
        self.webhook_url = attributes[:'webhook_url']
      else
        self.webhook_url = nil
      end

      if attributes.key?(:'demo')
        self.demo = attributes[:'demo']
      else
        self.demo = nil
      end

      if attributes.key?(:'latest_version')
        self.latest_version = attributes[:'latest_version']
      else
        self.latest_version = nil
      end

      if attributes.key?(:'last_changed_at')
        self.last_changed_at = attributes[:'last_changed_at']
      else
        self.last_changed_at = nil
      end

      if attributes.key?(:'last_changed_by_type')
        self.last_changed_by_type = attributes[:'last_changed_by_type']
      else
        self.last_changed_by_type = nil
      end

      if attributes.key?(:'last_changed_by_id')
        self.last_changed_by_id = attributes[:'last_changed_by_id']
      else
        self.last_changed_by_id = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @add_data_request_submission_id_footers.nil?
        invalid_properties.push('invalid value for "add_data_request_submission_id_footers", add_data_request_submission_id_footers cannot be nil.')
      end

      if @allow_additional_properties.nil?
        invalid_properties.push('invalid value for "allow_additional_properties", allow_additional_properties cannot be nil.')
      end

      if @document_parse_error.nil?
        invalid_properties.push('invalid value for "document_parse_error", document_parse_error cannot be nil.')
      end

      if @document_processed.nil?
        invalid_properties.push('invalid value for "document_processed", document_processed cannot be nil.')
      end

      if @document_state.nil?
        invalid_properties.push('invalid value for "document_state", document_state cannot be nil.')
      end

      if @editable_submissions.nil?
        invalid_properties.push('invalid value for "editable_submissions", editable_submissions cannot be nil.')
      end

      if @encrypt_pdfs.nil?
        invalid_properties.push('invalid value for "encrypt_pdfs", encrypt_pdfs cannot be nil.')
      end

      if @expiration_interval.nil?
        invalid_properties.push('invalid value for "expiration_interval", expiration_interval cannot be nil.')
      end

      if @expire_after.nil?
        invalid_properties.push('invalid value for "expire_after", expire_after cannot be nil.')
      end

      if @expire_submissions.nil?
        invalid_properties.push('invalid value for "expire_submissions", expire_submissions cannot be nil.')
      end

      if @first_template.nil?
        invalid_properties.push('invalid value for "first_template", first_template cannot be nil.')
      end

      if @locked.nil?
        invalid_properties.push('invalid value for "locked", locked cannot be nil.')
      end

      if @merge_audit_trail_pdf.nil?
        invalid_properties.push('invalid value for "merge_audit_trail_pdf", merge_audit_trail_pdf cannot be nil.')
      end

      if @page_count.nil?
        invalid_properties.push('invalid value for "page_count", page_count cannot be nil.')
      end

      if @public_submissions.nil?
        invalid_properties.push('invalid value for "public_submissions", public_submissions cannot be nil.')
      end

      if @public_web_form.nil?
        invalid_properties.push('invalid value for "public_web_form", public_web_form cannot be nil.')
      end

      if @template_type.nil?
        invalid_properties.push('invalid value for "template_type", template_type cannot be nil.')
      end

      if @demo.nil?
        invalid_properties.push('invalid value for "demo", demo cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @add_data_request_submission_id_footers.nil?
      return false if @allow_additional_properties.nil?
      return false if @document_parse_error.nil?
      return false if @document_processed.nil?
      return false if @document_state.nil?
      document_state_validator = EnumAttributeValidator.new('String', ["pending", "processed", "password_required", "malformed_pdf", "unknown_error"])
      return false unless document_state_validator.valid?(@document_state)
      return false if @editable_submissions.nil?
      return false if @encrypt_pdfs.nil?
      return false if @expiration_interval.nil?
      return false if @expire_after.nil?
      return false if @expire_submissions.nil?
      return false if @first_template.nil?
      return false if @locked.nil?
      return false if @merge_audit_trail_pdf.nil?
      return false if @page_count.nil?
      return false if @public_submissions.nil?
      return false if @public_web_form.nil?
      return false if @template_type.nil?
      template_type_validator = EnumAttributeValidator.new('String', ["pdf", "html"])
      return false unless template_type_validator.valid?(@template_type)
      return false if @demo.nil?
      last_changed_by_type_validator = EnumAttributeValidator.new('String', ["user", "api"])
      return false unless last_changed_by_type_validator.valid?(@last_changed_by_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_state Object to be assigned
    def document_state=(document_state)
      validator = EnumAttributeValidator.new('String', ["pending", "processed", "password_required", "malformed_pdf", "unknown_error"])
      unless validator.valid?(document_state)
        fail ArgumentError, "invalid value for \"document_state\", must be one of #{validator.allowable_values}."
      end
      @document_state = document_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] template_type Object to be assigned
    def template_type=(template_type)
      validator = EnumAttributeValidator.new('String', ["pdf", "html"])
      unless validator.valid?(template_type)
        fail ArgumentError, "invalid value for \"template_type\", must be one of #{validator.allowable_values}."
      end
      @template_type = template_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_changed_by_type Object to be assigned
    def last_changed_by_type=(last_changed_by_type)
      validator = EnumAttributeValidator.new('String', ["user", "api"])
      unless validator.valid?(last_changed_by_type)
        fail ArgumentError, "invalid value for \"last_changed_by_type\", must be one of #{validator.allowable_values}."
      end
      @last_changed_by_type = last_changed_by_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          add_data_request_submission_id_footers == o.add_data_request_submission_id_footers &&
          allow_additional_properties == o.allow_additional_properties &&
          description == o.description &&
          document_filename == o.document_filename &&
          document_md5 == o.document_md5 &&
          document_parse_error == o.document_parse_error &&
          document_processed == o.document_processed &&
          document_state == o.document_state &&
          document_url == o.document_url &&
          editable_submissions == o.editable_submissions &&
          embed_domains == o.embed_domains &&
          encrypt_pdfs_password == o.encrypt_pdfs_password &&
          encrypt_pdfs == o.encrypt_pdfs &&
          expiration_interval == o.expiration_interval &&
          expire_after == o.expire_after &&
          expire_submissions == o.expire_submissions &&
          external_predefined_fields_template_id == o.external_predefined_fields_template_id &&
          external_predefined_fields_template_name == o.external_predefined_fields_template_name &&
          first_template == o.first_template &&
          id == o.id &&
          locked == o.locked &&
          merge_audit_trail_pdf == o.merge_audit_trail_pdf &&
          name == o.name &&
          page_count == o.page_count &&
          page_dimensions == o.page_dimensions &&
          parent_folder_id == o.parent_folder_id &&
          path == o.path &&
          permanent_document_url == o.permanent_document_url &&
          public_submissions == o.public_submissions &&
          public_web_form == o.public_web_form &&
          redirect_url == o.redirect_url &&
          slack_webhook_url == o.slack_webhook_url &&
          template_type == o.template_type &&
          updated_at == o.updated_at &&
          version_published_at == o.version_published_at &&
          version == o.version &&
          webhook_url == o.webhook_url &&
          demo == o.demo &&
          latest_version == o.latest_version &&
          last_changed_at == o.last_changed_at &&
          last_changed_by_type == o.last_changed_by_type &&
          last_changed_by_id == o.last_changed_by_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [add_data_request_submission_id_footers, allow_additional_properties, description, document_filename, document_md5, document_parse_error, document_processed, document_state, document_url, editable_submissions, embed_domains, encrypt_pdfs_password, encrypt_pdfs, expiration_interval, expire_after, expire_submissions, external_predefined_fields_template_id, external_predefined_fields_template_name, first_template, id, locked, merge_audit_trail_pdf, name, page_count, page_dimensions, parent_folder_id, path, permanent_document_url, public_submissions, public_web_form, redirect_url, slack_webhook_url, template_type, updated_at, version_published_at, version, webhook_url, demo, latest_version, last_changed_at, last_changed_by_type, last_changed_by_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DocSpring.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
