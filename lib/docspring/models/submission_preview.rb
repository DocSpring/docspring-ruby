=begin
#DocSpring API

#DocSpring provides an API that helps you fill out and sign PDF templates.

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module DocSpring
  class SubmissionPreview
    attr_accessor :batch_id

    attr_accessor :data_requests

    attr_accessor :editable

    attr_accessor :expired

    attr_accessor :expires_at

    attr_accessor :id

    attr_accessor :json_schema_errors

    attr_accessor :metadata

    attr_accessor :password

    attr_accessor :processed_at

    attr_accessor :state

    attr_accessor :template_id

    attr_accessor :test

    attr_accessor :truncated_text

    attr_accessor :pdf_hash

    attr_accessor :download_url

    attr_accessor :permanent_download_url

    attr_accessor :preview_download_url

    attr_accessor :preview_generated_at

    attr_accessor :audit_trail_download_url

    attr_accessor :actions

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batch_id' => :'batch_id',
        :'data_requests' => :'data_requests',
        :'editable' => :'editable',
        :'expired' => :'expired',
        :'expires_at' => :'expires_at',
        :'id' => :'id',
        :'json_schema_errors' => :'json_schema_errors',
        :'metadata' => :'metadata',
        :'password' => :'password',
        :'processed_at' => :'processed_at',
        :'state' => :'state',
        :'template_id' => :'template_id',
        :'test' => :'test',
        :'truncated_text' => :'truncated_text',
        :'pdf_hash' => :'pdf_hash',
        :'download_url' => :'download_url',
        :'permanent_download_url' => :'permanent_download_url',
        :'preview_download_url' => :'preview_download_url',
        :'preview_generated_at' => :'preview_generated_at',
        :'audit_trail_download_url' => :'audit_trail_download_url',
        :'actions' => :'actions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'batch_id' => :'String',
        :'data_requests' => :'Array<SubmissionDataRequest>',
        :'editable' => :'Boolean',
        :'expired' => :'Boolean',
        :'expires_at' => :'String',
        :'id' => :'String',
        :'json_schema_errors' => :'Array<String>',
        :'metadata' => :'Object',
        :'password' => :'String',
        :'processed_at' => :'String',
        :'state' => :'String',
        :'template_id' => :'String',
        :'test' => :'Boolean',
        :'truncated_text' => :'Object',
        :'pdf_hash' => :'String',
        :'download_url' => :'String',
        :'permanent_download_url' => :'String',
        :'preview_download_url' => :'String',
        :'preview_generated_at' => :'String',
        :'audit_trail_download_url' => :'String',
        :'actions' => :'Array<SubmissionAction>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'batch_id',
        :'editable',
        :'expires_at',
        :'id',
        :'json_schema_errors',
        :'password',
        :'processed_at',
        :'template_id',
        :'truncated_text',
        :'pdf_hash',
        :'download_url',
        :'permanent_download_url',
        :'preview_download_url',
        :'preview_generated_at',
        :'audit_trail_download_url',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DocSpring::SubmissionPreview` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DocSpring::SubmissionPreview`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'batch_id')
        self.batch_id = attributes[:'batch_id']
      else
        self.batch_id = nil
      end

      if attributes.key?(:'data_requests')
        if (value = attributes[:'data_requests']).is_a?(Array)
          self.data_requests = value
        end
      else
        self.data_requests = nil
      end

      if attributes.key?(:'editable')
        self.editable = attributes[:'editable']
      else
        self.editable = nil
      end

      if attributes.key?(:'expired')
        self.expired = attributes[:'expired']
      else
        self.expired = nil
      end

      if attributes.key?(:'expires_at')
        self.expires_at = attributes[:'expires_at']
      else
        self.expires_at = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'json_schema_errors')
        if (value = attributes[:'json_schema_errors']).is_a?(Array)
          self.json_schema_errors = value
        end
      else
        self.json_schema_errors = nil
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      else
        self.metadata = nil
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      else
        self.password = nil
      end

      if attributes.key?(:'processed_at')
        self.processed_at = attributes[:'processed_at']
      else
        self.processed_at = nil
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = nil
      end

      if attributes.key?(:'template_id')
        self.template_id = attributes[:'template_id']
      else
        self.template_id = nil
      end

      if attributes.key?(:'test')
        self.test = attributes[:'test']
      else
        self.test = nil
      end

      if attributes.key?(:'truncated_text')
        self.truncated_text = attributes[:'truncated_text']
      else
        self.truncated_text = nil
      end

      if attributes.key?(:'pdf_hash')
        self.pdf_hash = attributes[:'pdf_hash']
      else
        self.pdf_hash = nil
      end

      if attributes.key?(:'download_url')
        self.download_url = attributes[:'download_url']
      else
        self.download_url = nil
      end

      if attributes.key?(:'permanent_download_url')
        self.permanent_download_url = attributes[:'permanent_download_url']
      else
        self.permanent_download_url = nil
      end

      if attributes.key?(:'preview_download_url')
        self.preview_download_url = attributes[:'preview_download_url']
      else
        self.preview_download_url = nil
      end

      if attributes.key?(:'preview_generated_at')
        self.preview_generated_at = attributes[:'preview_generated_at']
      else
        self.preview_generated_at = nil
      end

      if attributes.key?(:'audit_trail_download_url')
        self.audit_trail_download_url = attributes[:'audit_trail_download_url']
      else
        self.audit_trail_download_url = nil
      end

      if attributes.key?(:'actions')
        if (value = attributes[:'actions']).is_a?(Array)
          self.actions = value
        end
      else
        self.actions = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @data_requests.nil?
        invalid_properties.push('invalid value for "data_requests", data_requests cannot be nil.')
      end

      if @expired.nil?
        invalid_properties.push('invalid value for "expired", expired cannot be nil.')
      end

      if @metadata.nil?
        invalid_properties.push('invalid value for "metadata", metadata cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @test.nil?
        invalid_properties.push('invalid value for "test", test cannot be nil.')
      end

      if @actions.nil?
        invalid_properties.push('invalid value for "actions", actions cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @data_requests.nil?
      return false if @expired.nil?
      return false if @metadata.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["pending", "processed", "invalid_data", "error", "image_download_failed", "image_processing_failed", "waiting_for_data_requests", "syntax_error", "account_suspended", "license_revoked", "accidental"])
      return false unless state_validator.valid?(@state)
      return false if @test.nil?
      return false if @actions.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["pending", "processed", "invalid_data", "error", "image_download_failed", "image_processing_failed", "waiting_for_data_requests", "syntax_error", "account_suspended", "license_revoked", "accidental"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batch_id == o.batch_id &&
          data_requests == o.data_requests &&
          editable == o.editable &&
          expired == o.expired &&
          expires_at == o.expires_at &&
          id == o.id &&
          json_schema_errors == o.json_schema_errors &&
          metadata == o.metadata &&
          password == o.password &&
          processed_at == o.processed_at &&
          state == o.state &&
          template_id == o.template_id &&
          test == o.test &&
          truncated_text == o.truncated_text &&
          pdf_hash == o.pdf_hash &&
          download_url == o.download_url &&
          permanent_download_url == o.permanent_download_url &&
          preview_download_url == o.preview_download_url &&
          preview_generated_at == o.preview_generated_at &&
          audit_trail_download_url == o.audit_trail_download_url &&
          actions == o.actions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batch_id, data_requests, editable, expired, expires_at, id, json_schema_errors, metadata, password, processed_at, state, template_id, test, truncated_text, pdf_hash, download_url, permanent_download_url, preview_download_url, preview_generated_at, audit_trail_download_url, actions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DocSpring.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
